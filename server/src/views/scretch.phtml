<?php 
//existsTable
//createTable // ALTER TABLE // //uploadTableData
//existsTableData
//uploadTableData
if (!checkTable("test")) {
    echo "<br>table nem létezik";
}

echo "<br>win";
exit;









$usersAPI = json_decode(file_get_contents("https://fakestoreapi.com/users"),true);
$id = array_column($usersAPI,"id");
array_multisort($id, SORT_ASC, $usersAPI);
echo '<pre>';
foreach ($usersAPI as $user) {

    var_dump($user); 
}

function getUserById(){

}

function editUserById(){

}

function deleteUserById(){

}

function createUser(){

}

function getConnection(){

}

function checkTableData($tableName){
    try {
        $pdo = new PDO(
            'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname='. $_SERVER['DB_NAME'], 
            $_SERVER['DB_USER'],
            $_SERVER['DB_PASSWORD']
        );
        
        $sql = "SELECT * FROM `".$tableName."`";
        $stmt =  $pdo->prepare($sql);
        $stmt->execute();
        $exists = $stmt->fetchColumn();

        echo "<br>Table data<pre>";
        var_dump($exists);

        if ($exists>0) {
            return true; 
        } else {
            return false;
        }
    } catch (PDOException $pdoe) {
        return false; 
    }
}


function checkTable($tableName){
    $pdo = new PDO(
        'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname='. $_SERVER['DB_NAME'], 
        $_SERVER['DB_USER'],
        $_SERVER['DB_PASSWORD']
    );
    
    $sql = "SELECT 1 FROM information_schema.tables 
        WHERE table_schema = database() AND table_name = ?";
    $stmt =  $pdo->prepare($sql);
    try {
        $stmt->execute([$tableName]);
        $tableEx = $stmt->fetchColumn();
    } catch (PDOException $e) {
        die("<br>Tábla létezés ellenőrzés hibája: " . $e->getMessage());
    }

    if (!$tableEx) {
        createUserTable();
    } 

    $sql1 = "SELECT * FROM `".$tableName."`";
    $stmt =  $pdo->prepare($sql1);
    try{
        $stmt->execute();
        $dataEx = $stmt->fetchColumn();
    } catch (PDOException $e) {
        die("<br>Tábla adat ellenőrzés hibája: " . $e->getMessage());
    }
    if (!$dataEx) {
        # code...
    }

}

function createUserTable(){
    try {
        $sql = "CREATE TABLE `users` (
            `id` int NOT NULL ,
            `email` varchar(255) NOT NULL,
            `username` varchar(255) NOT NULL,
            `password` varchar(255) NOT NULL,
            `firstname` varchar(255) NOT NULL,
            `lastname` varchar(255) NOT NULL,
            `city` varchar(255) NOT NULL,
            `street` varchar(255) NOT NULL,
            `number` int NOT NULL,
            `zipcode` varchar(255) NOT NULL,
            `geoLat` float NOT NULL,
            `geoLong` float NOT NULL,
            `phone` varchar(255) NOT NULL,
            `uploaded` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (`id`)
        )";

        $pdo = new PDO(
            'mysql:host=' . $_SERVER['DB_HOST'] . ';dbname='. $_SERVER['DB_NAME'], 
            $_SERVER['DB_USER'],
            $_SERVER['DB_PASSWORD']
        );
        $stmt =  $pdo->prepare($sql);
        try {
            $stmt->execute();
        } catch (PDOException $e) {
            die("<br>Hiba a tábla létrehozása közben: " . $e->getMessage());
        }

    //data upload here
    $tableUpgrade = "ALTER TABLE `users` CHANGE `id` `id` INT NOT NULL AUTO_INCREMENT;";
    
    /** for perfectly same db first do without autoincrement
     * then ALTER TABLE `users` CHANGE `id` `id` INT NOT NULL AUTO_INCREMENT;
     * if (!preg_match('/^[a-zA-Z0-9_]+$/', $tableName)) {         throw new InvalidArgumentException('Invalid table name');    }
     * mintára sajátot
     */
     
    } catch (PDOException $e) {
        return false;
    }
}
?>

